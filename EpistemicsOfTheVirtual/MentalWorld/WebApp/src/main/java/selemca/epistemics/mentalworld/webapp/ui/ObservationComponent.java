package selemca.epistemics.mentalworld.webapp.ui;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.shared.ui.combobox.FilteringMode;
import com.vaadin.ui.*;

public class ObservationComponent extends Panel {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout wordnetLayout;
	@AutoGenerated
	private CheckBox pluralCheckbox;
	@AutoGenerated
	private ComboBox wordnetComboBox;
	@AutoGenerated
	private CheckBox wordnetCheckBox;
	@AutoGenerated
	private ListSelect beliefListSelect;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public ObservationComponent() {
		buildMainLayout();
		setCaption("Observation: select one or more");
		setContent(mainLayout);

		wordnetComboBox.setNullSelectionAllowed(true);
		wordnetComboBox.setFilteringMode(FilteringMode.STARTSWITH);
		wordnetComboBox.setEnabled(false);
		pluralCheckbox.setEnabled(false);
		wordnetCheckBox.addValueChangeListener(new WordnetCheckboxListener());
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// beliefListSelect
		beliefListSelect = new ListSelect();
		beliefListSelect.setCaption("Known concept");
		beliefListSelect.setImmediate(false);
		beliefListSelect.setWidth("-1px");
		beliefListSelect.setHeight("-1px");
        beliefListSelect.setRows(15);
		mainLayout.addComponent(beliefListSelect);
		
		// wordnetLayout
		wordnetLayout = buildWordnetLayout();
		mainLayout.addComponent(wordnetLayout);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildWordnetLayout() {
		// common part: create layout
		wordnetLayout = new VerticalLayout();
		wordnetLayout.setImmediate(false);
		wordnetLayout.setWidth("-1px");
		wordnetLayout.setHeight("-1px");
		wordnetLayout.setMargin(false);
		
		// wordnetCheckBox
		wordnetCheckBox = new CheckBox();
		wordnetCheckBox.setCaption("New concept");
		wordnetCheckBox.setImmediate(true);
		wordnetCheckBox.setWidth("-1px");
		wordnetCheckBox.setHeight("-1px");
		wordnetLayout.addComponent(wordnetCheckBox);
		
		// wordnetComboBox
		wordnetComboBox = new ComboBox();
		wordnetComboBox.setImmediate(false);
		wordnetComboBox.setWidth("-1px");
		wordnetComboBox.setHeight("-1px");
		wordnetLayout.addComponent(wordnetComboBox);
		
		// pluralCheckbox
		pluralCheckbox = new CheckBox();
		pluralCheckbox.setCaption("Use plural");
		pluralCheckbox.setImmediate(false);
		pluralCheckbox.setWidth("-1px");
		pluralCheckbox.setHeight("-1px");
		wordnetLayout.addComponent(pluralCheckbox);
		
		return wordnetLayout;
	}

	public CheckBox getPluralCheckbox() {
		return pluralCheckbox;
	}

	public ComboBox getWordnetComboBox() {
		return wordnetComboBox;
	}

	public CheckBox getWordnetCheckBox() {
		return wordnetCheckBox;
	}

	public ListSelect getBeliefListSelect() {
		return beliefListSelect;
	}

	private class WordnetCheckboxListener implements Property.ValueChangeListener {
		@Override
		public void valueChange(Property.ValueChangeEvent event) {
			boolean newConcept = wordnetCheckBox.getValue();
			boolean comboboxFilled = wordnetComboBox.getContainerDataSource().size() > 0;
			wordnetComboBox.setEnabled(newConcept && comboboxFilled);
			pluralCheckbox.setEnabled(newConcept && comboboxFilled);
		}
	}
}
