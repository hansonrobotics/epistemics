package selemca.epistemics.mentalworld.webapp.ui;

import com.vaadin.data.Container;
import com.vaadin.data.util.IndexedContainer;
import com.vaadin.ui.*;
import selemca.epistemics.data.entity.Concept;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

public class VirtualModelComponent extends CustomComponent {

	private VerticalLayout mainLayout;
	private TextArea logArea;
	private Button offerObservationButton;
    private ComboBox currentStateComboBox;
    private HorizontalLayout offerObservationLayout;
	private ObservationComponent observationComponent;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public VirtualModelComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

	}

	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// featureLayout
		observationComponent = new ObservationComponent();
		mainLayout.addComponent(observationComponent);

        // offerObservationLayout
        offerObservationLayout = buildOfferObservationLayout();
        mainLayout.addComponent(offerObservationLayout);
		
		// logArea
		logArea = new TextArea();
		logArea.setCaption("Deductions");
		logArea.setImmediate(false);
		logArea.setWidth("100.0%");
		logArea.setHeight("100.0%");
		mainLayout.addComponent(logArea);
		mainLayout.setExpandRatio(logArea, 1.0f);

		return mainLayout;
	}

    private HorizontalLayout buildOfferObservationLayout() {
        // common part: create layout
        offerObservationLayout = new HorizontalLayout();
        offerObservationLayout.setImmediate(false);
        offerObservationLayout.setWidth("100.0%");
        offerObservationLayout.setHeight("-1px");
        offerObservationLayout.setMargin(false);

        // offerObservationButton
        offerObservationButton = new Button();
        offerObservationButton.setCaption("Offer observation");
        offerObservationButton.setImmediate(true);
        offerObservationButton.setWidth("-1px");
        offerObservationButton.setHeight("-1px");
        offerObservationLayout.addComponent(offerObservationButton);

        // currentStateComboBox
        currentStateComboBox = new ComboBox("Current state");
        currentStateComboBox.setImmediate(true);
        currentStateComboBox.setWidth("-1px");
        currentStateComboBox.setHeight("-1px");
        currentStateComboBox.setNullSelectionAllowed(false);
        offerObservationLayout.addComponent(currentStateComboBox);

        return offerObservationLayout;
    }

	public TextArea getLogArea() {
		return logArea;
	}

	public Button getOfferObservationButton() {
		return offerObservationButton;
	}

	public ObservationComponent getObservationComponent() {
		return observationComponent;
	}

    public ComboBox getCurrentStateComboBox() {
        return currentStateComboBox;
    }

	public void setContextConcepts(Collection<Concept> contexts) {
		Container c = new IndexedContainer();
		for (Concept context : contexts) {
			c.addItem(context);
		}
		currentStateComboBox.setContainerDataSource(c);
	}

	public Optional<Concept> getSelectedContext() {
		Concept selected = (Concept) currentStateComboBox.getValue();
		return Optional.ofNullable(selected);
	}

    public void setSelectedContext(Concept concept) {
        currentStateComboBox.setValue(concept);
    }
}
